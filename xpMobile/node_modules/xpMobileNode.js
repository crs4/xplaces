
var xpNode = require('xpNode');
var xpTools = require('xpTools');

var xPlacesServerIPPort;
var localIP;
var configurationFile;


/* **********************************************************************
* 						xpMobileNode for generic node
********************************************************************** */

/**
 * xpMobileNode creates a mobile node of an xPlaces network.
 * @method xpNode
 * @param  {integer}     id An preogressive input integer, used to label different xpNode(s)
 * @param  {remoteRequest}     client A remote request handler used to create the datagram socket
 * @param  {string}     configurationPathFile The path to the JSON configuration file, default is JSON/configuration.json
 *
 */
function xpMobileNode(id, name, type, client, configurationPathFile) {

    if(typeof(configurationPathFile) === 'undefined') configurationPathFile = "JSON/configuration.json";

    var basePort = xpTools.getConfigurationData(configurationPathFile).netconf.basePort;
    this.localIP = xpTools.getConfigurationData(configurationPathFile).netconf.localIP;
    this.serverIPPort = xpTools.getConfigurationData(configurationPathFile).netconf.serverIPPort;


    this.id = id;
    this.name = name;
    this.type = type;
    //proxy node takes always the basePort, otherwise the port will be increased
    if(type != "XP_PROXY")
        this.port = basePort + id + 1;
    else
        this.port = basePort;
    this.descriptor;
    this.announcesList;
    this.deadList;
    this.eventListenerList;
    this.client = client;
    this.intervalAnnounce;
    this.intervalEvent;
    this.announceTimeout = 5000;
};

// Inheritance
xpMobileNode.prototype = Object.create(xpNode.prototype);

module.exports = xpMobileNode;