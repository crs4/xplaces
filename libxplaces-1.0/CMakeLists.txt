CMAKE_MINIMUM_REQUIRED(VERSION 2.8.3) #This version contains DeployQt4

PROJECT("xplaces-1.0")
STRING(TOUPPER ${PROJECT_NAME} PROJECT_NAME_CAPITALIZED)

INCLUDE(CMakeMacros/CMakeMacros.txt)

SET(CMAKE_DEBUG_POSTFIX "d")

file (STRINGS "versionnumber" VERSION_NUMBER)
string(REPLACE "." ";" VERSION_NUMBERS ${VERSION_NUMBER})

list (GET VERSION_NUMBERS 0 XP_VERSION_MAJOR)
list (GET VERSION_NUMBERS 1 XP_VERSION_MINOR)
list (GET VERSION_NUMBERS 2 XP_VERSION_PATCH)
list (GET VERSION_NUMBERS 3 XP_VERSION_BUILD)

SET(LIBXPLACES_VERSION ${XP_VERSION_MAJOR}.${XP_VERSION_MINOR}.${XP_VERSION_PATCH}.${XP_VERSION_BUILD} CACHE STRING "libxplaces version" FORCE)

SET (CMAKE_INSTALL_PREFIX /code/install/libxplaces-1.0 CACHE STRING "Install Prefix" FORCE)

IF(APPLE)
# enable @rpath in the install name for any shared library being built
# note: it is planned that a future version of CMake will enable this by default
SET(CMAKE_MACOSX_RPATH 1)
ENDIF ()



ADD_DEFINITIONS(-DUNICODE)

SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/CMakeModules)

#INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})

FILE(GLOB_RECURSE HEADER_FILES src/*.h src/*.hpp)
FILE(GLOB_RECURSE CPP_FILES src/*.cpp)

IF(WIN32)
ADD_LIBRARY(${PROJECT_NAME} SHARED WIN32 ${CPP_FILES} ${HEADER_FILES})
ELSEIF(APPLE)
ADD_LIBRARY(${PROJECT_NAME} SHARED ${CPP_FILES} ${HEADER_FILES})
ELSE()
ADD_LIBRARY(${PROJECT_NAME} SHARED ${CPP_FILES} ${HEADER_FILES})
ENDIF(WIN32)

IF(UNIX)
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} pthread)
ENDIF(UNIX)

IF (WIN32)
    SET_TARGET_PROPERTIES(${LIBNAME} PROPERTIES LINK_FLAGS "/LARGEADDRESSAWARE")
ENDIF (WIN32)


SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES VERSION ${LIBXPLACES_VERSION})


SET(SOURCE_DIR_PREFIX ${CMAKE_CURRENT_SOURCE_DIR}/src)

MACRO(INSTALL_HEADERS_WITH_DIRECTORY HEADER_LIST)

FOREACH(HEADER ${${HEADER_LIST}})
STRING(REGEX MATCH "(.*)[/\\]" DIR ${HEADER})
STRING(REGEX REPLACE "${SOURCE_DIR_PREFIX}" "" DIR ${DIR})
INSTALL(FILES ${HEADER} DESTINATION include/${DIR})
ENDFOREACH(HEADER)

ENDMACRO(INSTALL_HEADERS_WITH_DIRECTORY)



INSTALL_HEADERS_WITH_DIRECTORY(HEADER_FILES)

INSTALL(TARGETS ${PROJECT_NAME} 
    RUNTIME DESTINATION bin COMPONENT Runtime
    LIBRARY DESTINATION lib COMPONENT Runtime
    ARCHIVE DESTINATION lib COMPONENT Development
)


